openapi: 3.0.3
info:
  version: 1.0.0
  title: Book store
  description: |
    Bookshop API for store based on the OpenAPI 3.0 specification
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: book
    description: Everything about your books
  - name: order
    description: Operations about Orders

paths:
  /book:
    post:
      tags:
        - book
      summary: Add new book
      description: Adding new book
      operationId: addBook
      requestBody:
        $ref: '#/components/requestBodies/NewBook'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid requested body supplied

    get:
      tags:
        - book
      summary: Show all books
      description: Returns all books from store
      operationId: getBooks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        '204':
          description: Products not found

  /book/{bookId}:
    get:
      tags:
        - book
      summary: Find book by Id
      description: Returns found book by id
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invaild id

    put:
      tags:
        - book
      summary: Update an existing book
      description: Update an existing book
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Book object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid requested body supplied

    delete:
      tags:
        - book
      summary: Delete an existing book
      description: Delete an existing book
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Book not exists

  /book/search:
    get:
      tags:
        - book
      summary: Find books by search params
      description: Returns found book by search params
      operationId: searchBookBySearchParams
      parameters:
        - name: title
          in: path
          required: false
          schema:
            type: string
        - name: bookType
          in: path
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        '400':
          description: Both search params cannot be empty

  /order:
    post:
      tags:
        - order
      summary: Place a new order
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        $ref: '#/components/requestBodies/OrderBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '400':
          description: Invalid input

    get:
      tags:
        - order
      summary: Show all orders
      description: Returns all orders from store
      operationId: getOrders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDTO'
        '204':
          description: Orders not found

  /order/complete/{orderId}:
    put:
      tags:
        - order
      summary: Complete order
      description: Complete order
      operationId: completeOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Order not found

components:
  schemas:
    Author:
      type: object
      properties:
        authorId:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
      example:
        authorId: 1
        firstName: "Andrzej"
        lastName: "Sapkowski"
        books:
          - bookId: 1
            title: "The Witcher"
            authorId: 1
            bookType: "FANTASY"
            pages: 500
            visitor:
              bookVisitorId: 1
              visitorsCount: 1500
            price: 69.90
            availableQuantity: 5

    BookVisitor:
      type: object
      properties:
        bookVisitorId:
          type: integer
          format: int64
        book:
          $ref: '#/components/schemas/Book'
        visitorsCount:
          type: integer
          format: int64
      example:
        bookVisitorId: 1
        book:
          bookId: 1
          title: "The Witcher"
          authorId: 1
          bookType: "FANTASY"
          pages: 500
          price: 69.90
          availableQuantity: 5
        visitorsCount: 1500

    Book:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        title:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        bookType:
          type: string
          enum:
            - NOVEL
            - ACTION_AND_ADVENTURE
            - DETECTIVE
            - FANTASY
            - HISTORICAL
            - HORROR
            - THRILLER
            - CRIME
        pages:
          type: integer
        visitor:
          $ref: '#/components/schemas/BookVisitor'
        price:
          type: number
          format: double
        availableQuantity:
          type: integer
      example:
        bookId: 1
        title: "The Witcher"
        author:
          authorId: 1
          firstName: "Andrzej"
          lastName: "Sapkowski"
        bookType: "FANTASY"
        pages: 500
        visitor:
          bookVisitorId: 1
          visitorsCount: 1500
        price: 69.90
        availableQuantity: 5


    BookDTO:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        title:
          type: string
        authorId:
          type: integer
          format: int64
        pages:
          type: integer
        price:
          type: number
          format: double
        availableQuantity:
          type: integer
      example:
        bookId: 1
        title: "The Witcher"
        authorId: 1
        price: 69.90
        availableQuantity: 5

    BookRequest:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        price:
          type: number
          format: double
      example:
        bookId: 1
        price: 69.90

    NewBookRequest:
      type: object
      properties:
        title:
          type: string
        authorId:
          type: integer
          format: int64
        bookType:
          type: string
          enum:
            - NOVEL
            - ACTION_AND_ADVENTURE
            - DETECTIVE
            - FANTASY
            - HISTORICAL
            - HORROR
            - THRILLER
            - CRIME
        pages:
          type: integer
        price:
          type: number
          format: double
        availableQuantity:
          type: integer
      example:
        title: "Wied≈∫min"
        authorId: 1
        bookType: "FANTASY"
        pages: 500
        price: 69.90
        availableQuantity: 5

    Order:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
        quantity:
          type: number
          format: double
        totalPrice:
          type: number
          format: double
        bookPrice:
          type: number
          format: double
        paid:
          type: boolean
      example:
        orderId: 1
        bookId: 1
        quantity: 1
        totalPrice: 69.90
        bookPrice: 69.90
        paid: true

    OrderDTO:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
        quantity:
          type: number
          format: double
        totalPrice:
          type: number
          format: double
        paid:
          type: boolean
      example:
        orderId: 1
        bookId: 1
        quantity: 1
        totalPrice: 69.90
        paid: true

    OrderRequest:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        quantity:
          type: number
          format: double
      example:
        bookId: 1
        quantity: 1

    BookOrderRequest:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        title:
          type: string
        visitorCount:
          type: integer
          format: int64

  requestBodies:
    BookBody:
      description: A JSON object with the required book data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookRequest'
    NewBook:
      description: A JSON object with the required book data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewBookRequest'
    OrderBody:
      description: A JSON object with the required order data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderRequest'
